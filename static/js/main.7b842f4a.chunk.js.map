{"version":3,"sources":["Component/List/Task/Task.module.css","Component/Header/Header.module.css","Component/WriteTask/WriteTask.module.css","Container/ListMenu/ListMenu.module.css","Component/Header/Header.js","Component/WriteTask/WriteTask.js","Component/List/Task/Task.js","Component/List/List.js","Container/ListMenu/ListMenu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","container","task","yes","no","headerFont","header","submit","react_default","a","createElement","className","classes","input","props","placeholder","onChange","changed","value","inputText","onClick","clicked","deleteTask","id","list","listOfTasks","map","index","Task","key","ListMenu","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","event","target","setState","onAddListener","newTask","state","trim","length","alert","newList","concat","toConsumableArray","onDeleteListener","splice","WriteTask","List","Component","app","Fragment","Header","Container_ListMenu_ListMenu","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EACAA,EAAAC,QAAA,CAAkBC,UAAA,wBAAAC,KAAA,mBAAAC,IAAA,kBAAAC,GAAA,mCCAlBL,EAAAC,QAAA,CAAkBK,WAAA,2BAAAC,OAAA,yCCAlBP,EAAAC,QAAA,CAAkBC,UAAA,6BAAAM,OAAA,kDCAlBR,EAAAC,QAAA,CAAkBC,UAAA,wLCQHK,EANA,kBACXE,EAAAC,EAAAC,cAAA,OAAKC,UAAaC,IAAQN,QACtBE,EAAAC,EAAAC,cAAA,MAAIC,UAAaC,IAAQP,YAAzB,+FCeOQ,EAjBD,SAACC,GACX,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAaC,IAAQX,WACtBO,EAAAC,EAAAC,cAAA,SACIK,YAAc,wBACdC,SAAYF,EAAMG,QAClBC,MAASJ,EAAMK,YAGnBX,EAAAC,EAAAC,cAAA,UACIC,UAAaC,IAAQL,OACrBa,QAAWN,EAAMO,SAFrB,yBCWGnB,EApBF,SAACY,GACV,OACIN,EAAAC,EAAAC,cAAA,OACIC,UAAaC,IAAQX,WAErBO,EAAAC,EAAAC,cAAA,OACIC,UAAaC,IAAQV,MADzB,IAEOY,EAAMZ,KAFb,KAGAM,EAAAC,EAAAC,cAAA,UACIC,UAAaC,IAAQT,IACrBiB,QAAW,kBAAMN,EAAMQ,WAAWR,EAAMS,MAF5C,YAIAf,EAAAC,EAAAC,cAAA,UACIC,UAAaC,IAAQR,GACrBgB,QAAW,kBAAMN,EAAMQ,WAAWR,EAAMS,MAF5C,cCEGC,EAdF,SAACV,GAGV,OAFoBA,EAAMW,YAGVC,IAAK,SAACxB,EAAMyB,GAAP,OACbnB,EAAAC,EAAAC,cAACkB,EAAD,CACI1B,KAAQA,EACR2B,IAAOF,EACPJ,GAAMI,EACNL,WAAcR,EAAMQ,gBC0CrBQ,cA/CX,SAAAA,EAAahB,GAAO,IAAAiB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMpB,KAQVwB,gBAAkB,SAACC,GACf,IAAMrC,EAAOqC,EAAMC,OAAOtB,MAC1Ba,EAAKU,SAAS,CAACvC,UAXC6B,EAcpBW,cAAgB,WACZ,IAAMC,EAAUZ,EAAKa,MAAM1C,KAC3B,GAA6B,IAA1ByC,EAAQE,OAAOC,OACdC,MAAM,6BACL,CACD,IAAMC,EAAO,GAAAC,OAAAjB,OAAAkB,EAAA,EAAAlB,CAAOD,EAAKa,MAAMnB,aAAlB,CAA+BkB,IAC5CZ,EAAKU,SAAS,CAAChB,YAAauB,EAAS9C,KAAM,OApB/B6B,EAwBpBoB,iBAAmB,SAACjD,GAChB,IAAMuB,EAAWO,OAAAkB,EAAA,EAAAlB,CAAOD,EAAKa,MAAMnB,aACnCA,EAAY2B,OAAOlD,EAAO,GAC1B6B,EAAKU,SAAS,CAAChB,iBAxBfM,EAAKa,MAAQ,CACT1C,KAAO,GACPuB,YAAc,IALFM,wEAgChB,OACIvB,EAAAC,EAAAC,cAAA,OAAKC,UAAaC,IAAQX,WACtBO,EAAAC,EAAAC,cAAC2C,EAAD,CACIpC,QAAWiB,KAAKI,gBAChBjB,QAAWa,KAAKQ,cAChBvB,UAAae,KAAKU,MAAM1C,OAE5BM,EAAAC,EAAAC,cAAC4C,EAAD,CACI7B,YAAeS,KAAKU,MAAMnB,YAC1BH,WAAcY,KAAKiB,2BA3ChBI,aCQRC,EATH,WACV,OACEhD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgD,SAAA,KACEjD,EAAAC,EAAAC,cAACgD,EAAD,MACAlD,EAAAC,EAAAC,cAACiD,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7b842f4a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Task_container__ZHcpg\",\"task\":\"Task_task__1yHzV\",\"yes\":\"Task_yes__f6LB2\",\"no\":\"Task_no__3PZyO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerFont\":\"Header_headerFont__11--t\",\"header\":\"Header_header__1qtQ6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"WriteTask_container__1pRp2\",\"submit\":\"WriteTask_submit__34uoH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ListMenu_container__2wFZm\"};","import React from 'react';\r\nimport classes from './Header.module.css';\r\n\r\nconst header = () => (\r\n    <div className = {classes.header}>\r\n        <h1 className = {classes.headerFont}> To Do List </h1>\r\n    </div>\r\n);\r\n\r\nexport default header;","import React from 'react';\r\nimport classes from './WriteTask.module.css';\r\n\r\nconst input = (props) => {\r\n    return (\r\n        <div className = {classes.container}>\r\n            <input \r\n                placeholder = \"please type something\"\r\n                onChange = {props.changed}\r\n                value = {props.inputText}\r\n            />\r\n            \r\n            <button \r\n                className = {classes.submit}\r\n                onClick = {props.clicked}\r\n            > + </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default input;","import React from 'react';\r\nimport classes from './Task.module.css';\r\n\r\nconst task = (props) => {\r\n    return(\r\n        <div \r\n            className = {classes.container}\r\n            >\r\n            <div\r\n                className = {classes.task}\r\n                > {props.task} </div>\r\n            <button \r\n                className = {classes.yes}\r\n                onClick = {() => props.deleteTask(props.id)}\r\n                > ✔ </button>\r\n            <button\r\n                className = {classes.no}\r\n                onClick = {() => props.deleteTask(props.id)}\r\n                > ✘ </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default task;","import React from 'react';\r\nimport Task from './Task/Task';\r\n\r\nconst list = (props) => {\r\n    const listOfTasks = props.listOfTasks;\r\n\r\n    return(\r\n        listOfTasks.map( (task, index) => (\r\n            <Task \r\n                task = {task}\r\n                key = {index}\r\n                id = {index}\r\n                deleteTask = {props.deleteTask} />\r\n        ))\r\n    );\r\n};\r\n\r\nexport default list;\r\n","import React, {Component} from 'react';\r\nimport classes from './ListMenu.module.css';\r\nimport WriteTask from '../../Component/WriteTask/WriteTask';\r\nimport List from '../../Component/List/List';\r\n\r\nclass ListMenu extends Component {\r\n\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            task : '',\r\n            listOfTasks : []\r\n        }\r\n    }\r\n\r\n    onChangeHandler = (event) => {\r\n        const task = event.target.value;\r\n        this.setState({task});\r\n    }\r\n\r\n    onAddListener = () => {\r\n        const newTask = this.state.task;\r\n        if(newTask.trim().length === 0)\r\n            alert(\"please type something\");\r\n        else {\r\n            const newList = [...this.state.listOfTasks, newTask];\r\n            this.setState({listOfTasks: newList, task: ''});\r\n        }\r\n    }\r\n\r\n    onDeleteListener = (task) => {\r\n        const listOfTasks = [...this.state.listOfTasks];\r\n        listOfTasks.splice(task , 1);\r\n        this.setState({listOfTasks});\r\n    }\r\n   \r\n\r\n    render() {\r\n        return ( \r\n            <div className = {classes.container}>\r\n                <WriteTask \r\n                    changed = {this.onChangeHandler}\r\n                    clicked = {this.onAddListener}\r\n                    inputText = {this.state.task}\r\n                    />\r\n                <List \r\n                    listOfTasks = {this.state.listOfTasks}\r\n                    deleteTask = {this.onDeleteListener}/>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ListMenu;","import React from 'react';\nimport Header from './Component/Header/Header';\nimport ListMenu from './Container/ListMenu/ListMenu';\n\nconst app = () => {\n  return (\n    <>\n      <Header />\n      <ListMenu />\n    </>\n  );\n}\n\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}